# Copyright (c) 2017 David Pfander
# Copyright (c) 2017-2018 Patrick Diehl
# Copyright (c) 2017-2019 Dominic Marcello
# Copyright (c) 2019 Parsa Amini
#
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

version: 2

anchors:
  - &docker_config
      docker:
        - image: stellargroup/octotiger:prerequisites-gcc6

jobs:
  build:
    <<: *docker_config
    steps:
      - checkout:
          path: /octotiger
      - run:
          name: Configure Octotiger
          command: |
            cmake -H/octotiger -B/octotiger/build \
                  -DCMAKE_BUILD_TYPE=Release \
                  -DHPX_DIR=/local/hpx/lib/cmake/HPX \
                  -DVc_DIR=/local/vc/lib/cmake/Vc \
                  -DSilo_DIR=/local/silo \
                  -DHDF5_ROOT=/local/hdf5 \
                  -DBOOST_ROOT=/local/boost \
                  -GNinja
      - run:
          name: Build
          command: cmake --build /octotiger/build -- -j2
      - persist_to_workspace:
          root: /
          paths:
            - octotiger/build

  test_marshak:
    <<: *docker_config
    working_directory: /octotiger/build
    steps:
      - checkout:
          path: /octotiger
      - attach_workspace:
          at: /
      - run:
          name: Marshak wave test
          command: ctest --output-on-failure -R test_problems.cpu.marshak.diff
      - run:
          name: Move artifacts
          command: |
            mkdir /test
            mv *.silo *.dat /test/ || :
          when: always
      - store_artifacts:
          path: /test

  test_blast:
    <<: *docker_config
    working_directory: /octotiger/build
    steps:
      - checkout:
          path: /octotiger
      - attach_workspace:
          at: /
      - run:
          name: Blast test
          command: ctest --output-on-failure -R test_problems.cpu.blast.diff
      - run:
          name: Move artifacts
          command: |
            mkdir /test
            mv *.silo *.dat /test/ || :
          when: always
      - store_artifacts:
          path: /test

  test_sod:
    <<: *docker_config
    working_directory: /octotiger/build
    steps:
      - checkout:
          path: /octotiger
      - attach_workspace:
          at: /
      - run:
          name: Sod shock tube test
          command: ctest --output-on-failure -R test_problems.cpu.sod.diff
      - run:
          name: Move artifacts
          command: |
            mkdir /test
            mv *.silo *.dat /test/ || :
          when: always
      - store_artifacts:
          path: /test

  test_sphere:
    <<: *docker_config
    working_directory: /octotiger/build
    steps:
      - checkout:
          path: /octotiger
      - attach_workspace:
          at: /
      - run:
          name: Solid sphere test
          command: ctest --output-on-failure -R test_problems.cpu.sphere.diff
      - run:
          name: Move artifacts
          command: |
            mkdir /test
            mv *.silo *.dat /test/ || :
          when: always
      - store_artifacts:
          path: /test

  test_rotating_star:
    <<: *docker_config
    working_directory: /octotiger/build
    steps:
      - checkout:
          path: /octotiger
      - attach_workspace:
          at: /
      - run:
          name: Rotating star test
          command: ctest --output-on-failure -R test_problems.cpu.rotating_star.diff
      - run:
          name: Move artifacts
          command: |
            mkdir /test
            mv *.silo *.bin *.dat /test/ || :
          when: always
      - store_artifacts:
          path: /test
  build_base_image:
    <<: *docker_config
    working_directory: /octotiger/tools/docker/base_image
    steps:
      # Clone the code
      - checkout
      # Install the Docker Client
      - run:
          name: Install Docker Client
          environment:
              VER: 18.06.3-ce
          command: |
              curl -JL https://download.docker.com/linux/static/stable/x86_64/docker-${VER}.tgz | \
                  tar xz --strip-components=1
          working_directory: /usr/bin/
      # Enable CircleCI Docker in Docker
      - setup_remote_docker
      # Build the new base image
      - run:
          name: Create Docker Image
          environment:
            TARGET_IMAGE_NAME: stellargroup/octotiger:prerequisites-gcc6
          command: |
            docker build -t ${TARGET_IMAGE_NAME} -f prerequisites-gcc.dockerfile --build-arg GCC_RELEASE=6 .
          deploy: |
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
            docker push ${TARGET_IMAGE_NAME}

workflows:
  version: 2
  build-n-test:
    jobs:
      - build
      - test_marshak:
          requires:
            - build
      - test_blast:
          requires:
            - build
      - test_sod:
          requires:
            - build
      - test_rotating_star:
          requires:
            - build
      - test_sphere:
          requires:
            - build
  weekly:
    triggers:
      - schedule:
          cron "0 0 * * 0"
          filters:
            branches:
              only:
                - master
    jobs:
      - build_base_image
